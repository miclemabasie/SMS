from django.shortcuts import render, get_object_or_404, redirect
from django.urls import reverse
from .models import StudentProfile, Class, Subject, Mark, TeacherProfile
from apps.terms.models import ExaminationSession, AcademicYear
from django.contrib.auth import get_user_model
from apps.profiles.models import ParentProfile
from apps.fees.models import Fee
from datetime import datetime, timezone, time
from django.contrib.auth.decorators import login_required
import random
import openpyxl
from django.http import HttpResponse
from openpyxl.utils import get_column_letter
import csv
from django.contrib import messages
from openpyxl import workbook, load_workbook


User = get_user_model()

from faker import Faker
faker = Faker()

@login_required
def list_student_view(request):

    queryset = StudentProfile.objects.all()
    template_name = "students/list.html"
    context = {
        "section": "student-area",
        "students": queryset,
    }

    return render(request, template_name, context)


@login_required
def student_detail_view(request, matricule, pkid):
    student = get_object_or_404(StudentProfile, matricule=matricule, pkid=pkid)
    payment_history = student.payment_history.all()
    fee = Fee.objects.filter(student=student).first()

    # Grab all the mark recods associated to this student
    marks = student.student_marks.all()

    template_name = "students/details.html"
    context = {
        "section": "student-area",
        "student_detial_section": True,
        "student": student,
        "payment_history": payment_history,
        "number_of_payments": len(payment_history),
        "marks": marks,
        "fee": fee,
    }

    return render(request, template_name, context)


@login_required
def add_student_view(request):
    classes = Class.objects.all()
    if request.method == "POST":
        print(request.POST)
        
        parent_fname = request.POST.get("first_name")
        parent_occupation = request.POST.get("parent-occupation")
        parent_phone = request.POST.get("parent-phone")
        parent_email = request.POST.get("parent-email")
        parent_address = request.POST.get("parent-address")
        parent_role = request.POST.get("parent-role")

        st_class = request.POST.get("student_class")
        # Get class in which student is part of
        student_class = get_object_or_404(Class, pkid=int(st_class))

        # Create parent for student
        student_parent = ParentProfile.objects.create(
            first_name=parent_fname,
            phone=parent_phone,
            occupation=parent_occupation,
            address=parent_address,
            email=parent_email,
            role=parent_role
        )

        student_parent.save()

        st_fname = request.POST.get("first_name")
        st_lname = request.POST.get("last_name")
        st_gender = request.POST.get("selected_gender")
        st_email = request.POST.get("email")
        st_dob = request.POST.get("dob")
        st_address = request.POST.get("address")
        st_phone = request.POST.get("phone")
        st_domain = request.POST.get("domain")
        st_image = request.FILES.get("profile_photo")

        # Create the user instance
        # construct a valid date out of the html date
        date_string_from_form = st_dob

        dob = datetime.strptime(date_string_from_form, '%Y-%m-%d').date()
        # Create a specific time
        specific_time = time(8, 51, 2)

        dob_with_time = datetime.combine(dob, specific_time, tzinfo=timezone.utc)

        # Construct faker usernames, this is done assuming that the usernames are not important to the students
        # we avoid using direct fake usernames, so as to avoid unique constrainst failure in the database
        # This is why the random digit is added to the end of every fake username generated by faker
        faker_username = faker.user_name()
        # attache random digit to the end
        faker_username + str(random.randint(0,9))

        if not st_email:
            st_email = faker.email()
 
        user = User.objects.create(
            username=faker_username,
            first_name=st_fname,
            last_name=st_lname,
            email=st_email,
            is_student=True,
            dob=dob_with_time
        )

        user.save()


        # Create student instance

        student = StudentProfile.objects.create(
            user = user,
            parent = student_parent,
            current_class=student_class,
            gender = st_gender,
            phone_number=st_phone,
            # profile_photo=st_photo,
            address = st_address,
            domain = st_domain,
        )

        student.save()
        if st_image:
            student.profile_photo = st_image
        student.save()
        return redirect(reverse("students:student-list"))

        
    else:
        pass
    template_name = "students/add.html"

    context = {
        "section": "student-area",
        "classes": classes
    }

    return render(request, template_name, context)


@login_required
def edit_student_profile(request, pkid, matricule):
    student = get_object_or_404(StudentProfile, pkid=pkid, matricule=matricule)

    if request.method == "POST":
        st_class = request.POST.get("student_class")
        student_class = get_object_or_404(Class, pkid=int(st_class))

        st_fname = request.POST.get("first_name")
        st_lname = request.POST.get("last_name")
        st_gender = request.POST.get("selected_gender")
        st_email = request.POST.get("email")
        st_dob = request.POST.get("dob")
        st_address = request.POST.get("address")
        st_phone = request.POST.get("phone")
        st_domain = request.POST.get("domain")
        st_image = request.FILES.get("profile_photo")

        print("This is the image", st_image)

        # Parse date string from form
        dob = datetime.strptime(st_dob, '%Y-%m-%d').date()
        specific_time = time(8, 51, 2)

        dob_with_time = datetime.combine(dob, specific_time, tzinfo=timezone.utc)

        # Update user fields
        student.user.first_name = st_fname
        student.user.last_name = st_lname
        student.user.email = st_email
        student.user.dob = dob_with_time

        if st_image:
            student.profile_photo = st_image
        student.user.save()

        # Update student fields
        student.current_class = student_class
        student.gender = st_gender
        student.phone_number = st_phone
        student.address = st_address
        student.domain = st_domain

        student.save()
        return redirect(reverse("students:student-detail", kwargs={"pkid": student.pkid, "matricule": student.matricule}))

    # Get and associate a parent to the request.
    parent = student.parent
    template_name = "students/edit.html"
    context = {
        "section": "student_area",
        'student_profile': student,
        'dob': str(student.user.dob.date()),
        "classes": Class.objects.all()
    }

    return render(request, template_name, context)


@login_required
def download_marksheet(request, class_pkid, *args, **kwargs):
    # Get the class for which the mark sheet needs to be downloaded}|

    klass = get_object_or_404(Class, pkid=class_pkid)
    current_academic_session = AcademicYear.objects.filter(is_current=True).first()
    current_exam_session = ExaminationSession.objects.filter(is_current=True).first()
    if request.method == "POST":
        print("POST WAS MADE TO CLASS ID: ", class_pkid)
        print("POST WAS MADE TO subject ID: ", request.POST.get("selected_subject_id"))
        subject_id = request.POST.get("selected_subject_id")
        # Make sure subject with id exist
        subjects = Subject.objects.filter(pkid=subject_id)
        if subjects.exists():
            subject = subjects.first()
        else:
            messages.error(request, "Subject Does not exist")
            return redirect("students:marks")


        # Fetch all the students associated with the class
        students = klass.students.all()
        # Create a new workbook
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "marks"

        # Define column headers
        headers = [
            "Matricule",
            "Full Name",
            "Class",
            "Mark",
            "Acadmemic Session",
            "Exam Session",
            "Subject Name",
            "SPKID",
        ]

        # Write headers to the first row
        for col_num, header in enumerate(headers, start=1):
            cell = ws.cell(row=1, column=col_num)
            cell.value = header

        # Write student data to the worksheet
        for row_num, student in enumerate(students, start=2):
            ws.cell(row=row_num, column=1).value = student.matricule
            ws.cell(row=row_num, column=2).value = student.user.get_fullname
            ws.cell(row=row_num, column=3).value = f"{student.current_class.grade_level}-{student.current_class.class_name}"
            # ws.cell(row=row_num, column=4).value = current_academic_session.name
            ws.cell(row=row_num, column=5).value = current_academic_session.name
            ws.cell(row=row_num, column=6).value = current_exam_session.exam_session
            ws.cell(row=row_num, column=7).value = subject.name
            ws.cell(row=row_num, column=8).value = subject.pkid

        # Set column widths
        for col_num in range(1, len(headers) + 1):
            column_letter = get_column_letter(col_num)
            ws.column_dimensions[column_letter].width = 20

        # Create a response object
        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        response['Content-Disposition'] = 'attachment; filename=student_profiles.xlsx'

        # Save the workbook to the response
        wb.save(response)

        return response

    template_name = "students/marks-sheet-download.html"
    context = {
        'section': "marks-area"
    }
    return render(request, template_name, context)

@login_required
def upload_marks(request, class_pkid, *args, **kwargs):
    # Get the subject and all the students associated to thesubject from the database

    klass = get_object_or_404(Class, pkid=class_pkid)
    if request.method == 'POST' and request.FILES['marks_file']:
        marks_file = request.FILES['marks_file']
        teacher_matricule = request.POST.get("teacher_matricule")
        selected_subject_id = request.POST.get("selected_subject_id")

        print("This is the information from the form: ", teacher_matricule, selected_subject_id)

        # decoded_file = marks_file.read().decode('utf-8').splitlines()

        # Get the teacher from the DB
        teachers = TeacherProfile.objects.filter(matricule=teacher_matricule)
        if teachers.exists():
            teacher = teachers.first()
        else:
            messages.error(request, "No Teacher found with the given matricule")
            return redirect(reverse("students:marks-upload", kwargs={"class_pkid": class_pkid}))

        # Get the subject from the database
        subjects = Subject.objects.filter(pkid=selected_subject_id)
        if subjects.exists():
            subject = subjects.first()
        else:
            messages.error(request, "Subject not found.")
            return redirect(reverse("students:marks-uploads", kwargs={"class_pkid": class_pkid}))
        
        # Get the session
        exam_session = ExaminationSession.objects.get(is_current=True)
        
        wb = load_workbook(filename=marks_file)

        ws = wb.get_sheet_by_name("marks")

        
        for row in ws.iter_rows(min_row=2, values_only=True):
            student_matricule, marks, subject_name, subject_id = row[0], row[3], row[6], row[7]
            print(f"student mat: {student_matricule}, mark: {marks}, subjectname: {subject_name}, subject_id: {subject_id}")
            student = StudentProfile.objects.get(matricule=student_matricule)
            # Check if a mark already exists for this student and subject
            mark, created = Mark.objects.get_or_create(student=student, subject=subject, exam_session=exam_session)

            mark.teacher = teacher

            # Update the score
            mark.score = marks
            mark.save()
            print(mark)

        messages.success(request, f"Marks have been updated for the subject: `{subject.name}` by: `{teacher.user.username}` with matricule No: {teacher.matricule}")
        return redirect(reverse("students:marks"))

    template_name = "students/upload-marks.html"
    context = {
        "section": "marks-area",
        "class": klass,
        "subjects": Subject.objects.all()
    }

    return render(request, template_name, context)


@login_required
def marks(request):

    template_name = "students/marks.html"
    context = {
        "section": "marks-area",
        'classes': Class.objects.all(),
        'subjects': Subject.objects.all(),
    }

    return render(request, template_name, context)